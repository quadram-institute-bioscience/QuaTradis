#!/usr/bin/env python3

import argparse
import os.path
import sys
import time

from quatradis.tags import remove_tags
from quatradis.mapper import index_and_align, sam2bam
from quatradis.isp_create import plot


def run_tradis(fastq, reference, output_prefix, tag="", mapper="bwa", threads=1, max_mismatches=0, cutoff=30, verbose=False):
    """
    The main program logic for running tradis.  Tradis takes in a fastq file and a reference as input and generates
    transposon insertion site plot files for each reference sequence, along with stats related to this.
    :param fastq: The fastq formatted file containing reads.  Can be gzipped.
    :param reference: The fasta formatted reference sequences
    :param output_prefix: Output prefix for output files
    :param tag: Tag to identify and trim in reads.  If left empty then we run tradis in tagless mode and map reads as is.
    :param mapper: The mapping tools to map reads to reference
    :param threads: Number of threads used for mapping and sorting alignments
    :param max_mismatches: number of mismatches allowed when matching tag
    :param cutoff: Quality score cutoff value.  Alignments with score less than this are not considered for analysis.
    :param verbose: Extra logging information
    :return:
    """

    if not os.path.exists(fastq):
        raise ValueError("Fastq input file not found at " + fastq)

    if not os.path.exists(reference):
        raise ValueError("Reference fasta file not found at " + reference)

    start = time.time()

    detagged = output_prefix + ".rmtag.fastq.gz"

    if verbose:
        print("::::::::::::::::::\n" + fastq + "\n::::::::::::::::::\n\n", file=sys.stderr)

    nb_reads = 0
    nb_tagged_reads = 0
    if tag:
        if verbose:
            print("..........Removing tags that match user input: " + tag + "\n", file=sys.stderr)
        nb_reads, nb_tagged_reads = remove_tags(fastq, detagged, tag=tag, max_mismatches=max_mismatches, filter=True, trim=True)
    else:
        if verbose:
            print("..........Tagless mode selected, skipping read preparation step\n", file=sys.stderr)
        if not fastq[-3:] == ".gz":
            detagged = detagged[-3:]
        if not os.path.exists(detagged):
            os.symlink(fastq, detagged)

    index = output_prefix + "ref.index"
    mapped_reads = output_prefix + ".mapped.sam"
    if verbose:
        print("..........Map reads to reference using " + mapper + "\n", file=sys.stderr)
    index_and_align(detagged, reference, index, mapped_reads, mapper, threads=threads)

    bam = output_prefix + ".mapped.bam"
    if verbose:
        print("..........Convert SAM to BAM, then sort, index and check\n", file=sys.stderr)
    sam2bam(mapped_reads, bam, threads=threads)
    os.remove(mapped_reads)

    plot_file = output_prefix + ".plot"
    if verbose:
        print("..........Generate insertion site plot files and statistics\n", file=sys.stderr)
    plot(bam, fastq, plot_file, cutoff_score=cutoff, nb_reads=nb_reads, nb_tagged_reads=nb_tagged_reads)

    end = time.time()
    if verbose:
        print("Tradis has completed in", '{:.3f}'.format(end - start) + "s")
        print("Mapped reads are here:", bam)
        print("Plot files are here:", plot_file + ".*")


def main():
    parser = argparse.ArgumentParser(description='Generate transposon insert sites')
    parser.add_argument('fastq', type=str,
                        help='The fastq formatted reads for processing (can be gzipped).')
    parser.add_argument('reference', type=str,
                        help='The fasta formatted reference for processing.')
    parser.add_argument('--output_prefix', dest='output_prefix', default="quatradis_out",
                        help='The filename output_prefix to use for all output files (default: quatradis_out)')
    parser.add_argument('-n', '--threads', default=1,
                        help='number of threads to use when mapping and sorting (default: 1)')
    parser.add_argument('-a', '--aligner', default="bwa",
                        help='mapping tool to use (bwa, smalt, minimap2) (default: bwa)')
    parser.add_argument('-m', '--mapping_score', type=str, default=30,
                        help='mapping quality must be greater than X (Default: 30)')
    parser.add_argument('-t', '--tag', type=str, default="",
                        help='the tag to remove from fastq input (default: "")')
    parser.add_argument('-mm', '--mismatch', type=str, default=0,
                        help='number of mismatches allowed when matching tag (default: 0)')
    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true',
                        help='Add verbose output to console logs')

    args = parser.parse_args()

    run_tradis(args.fastq, args.reference, args.output_prefix,
               mapper=args.aligner, threads=args.threads, max_mismatches=args.mismatch,
               cutoff=args.mapping_score, verbose=args.verbose)


if __name__ == '__main__':
    main()

