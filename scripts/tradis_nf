#!/usr/bin/env python3

import argparse
import os.path


def run_tradis_nf(fastq_list, reference, output_dir, tag="", mapper="bwa", threads=1, nextflow_config=None, max_mismatches=0, cutoff=30):
    """
    The main program logic for running tradis.  Tradis takes in a fastq file and a reference as input and generates
    transposon insertion site plot files for each reference sequence, along with stats related to this.  This function
    handles multiple executions of tradis for individual fastqs using nextflow
    :param fastq_list: A file containing a line separated list of fastq formatted file containing reads. Each fastq file can be read gzipped or uncompressed.
    :param reference: The fasta formatted reference sequences
    :param output_dir: Output directory for all output files
    :param tag: Tag to identify and trim in reads.  If left empty then we run tradis in tagless mode and map reads as is.
    :param mapper: The mapping tools to map reads to reference
    :param threads: Number of threads used for mapping and sorting alignments
    :param nextflow_config: Allows the user to add extra nextflow config to tradis.  This can be used to distribute processes over cluster nodes for example.  See nextflow docs for details.
    :param max_mismatches: number of mismatches allowed when matching tag
    :param cutoff: Quality score cutoff value.  Alignments with score less than this are not considered for analysis.
    :return:
    """

    # Clean up the fastq input file first

    with open(fastq_list, 'r') as fql:
        fastqs = [x.strip() for x in fql.readlines() if x]
        with open("quadtradis_nf.fastq.txt", 'w') as ofql:
            ofql.write("\n".join(fastqs))

    nfcfg = ""
    if nextflow_config:
        nfcfg = "-c " + nextflow_config

    os.system("nextflow " + nfcfg + os.path.dirname(__file__) + "/../pipelines/multi_tradis.nf --reference " + reference +
              " --fastqs quadtradis_nf.fastq.txt --refname myref --outdir " + output_dir +
              " --tag " + tag + " --aligner " + mapper + " --threads " + str(threads) +
              " --mismatch " + str(max_mismatches) + " --mapping_score " + str(cutoff))

def main():
    parser = argparse.ArgumentParser(description='Generate transposon insert sites')
    parser.add_argument('fastqs', type=str,
                        help='The fastq formatted reads for processing (can be gzipped).')
    parser.add_argument('reference', type=str,
                        help='The fasta formatted reference for processing.')
    parser.add_argument('-o', '--output_dir', default="results",
                        help='The filename output_prefix to use for all output files (default: results)')
    parser.add_argument('-n', '--threads', type=int, default=1,
                        help='number of threads to use when mapping and sorting (default: 1)')
    parser.add_argument('-a', '--aligner', default="bwa",
                        help='mapping tool to use (bwa, smalt, minimap2) (default: bwa)')
    parser.add_argument('-m', '--mapping_score', type=int, default=30,
                        help='mapping quality must be greater than X (Default: 30)')
    parser.add_argument('-t', '--tag', type=str, default="",
                        help='the tag to remove from fastq input (default: "")')
    parser.add_argument('-mm', '--mismatch', type=int, default=0,
                        help='number of mismatches allowed when matching tag (default: 0)')
    parser.add_argument('-nc', '--nextflow_config', type=str,
                        help='If provided add the nexflow parameters in this file to combine with our defaults.  Use this to distribute processes over a cluster for example.  See nextflow docs for more details.')

    args = parser.parse_args()

    run_tradis_nf(args.fastqs, args.reference, args.output_dir,
               mapper=args.aligner, threads=args.threads, nextflow_config=args.nextflow_config,
               tag=args.tag, max_mismatches=args.mismatch, cutoff=args.mapping_score)


if __name__ == '__main__':
    main()

